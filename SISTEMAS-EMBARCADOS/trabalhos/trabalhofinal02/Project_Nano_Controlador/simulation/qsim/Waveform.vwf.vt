// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/29/2021 11:11:26"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    NanoControlador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module NanoControlador_vlg_sample_tst(
	A_bus,
	B_bus,
	ula_op,
	sampler_tx
);
input [7:0] A_bus;
input [7:0] B_bus;
input [2:0] ula_op;
output sampler_tx;

reg sample;
time current_time;
always @(A_bus or B_bus or ula_op)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module NanoControlador_vlg_check_tst (
	C_Bus,
	c_inst,
	n_inst,
	v_inst,
	z_inst,
	sampler_rx
);
input [7:0] C_Bus;
input  c_inst;
input  n_inst;
input  v_inst;
input  z_inst;
input sampler_rx;

reg [7:0] C_Bus_expected;
reg  c_inst_expected;
reg  n_inst_expected;
reg  v_inst_expected;
reg  z_inst_expected;

reg [7:0] C_Bus_prev;
reg  c_inst_prev;
reg  n_inst_prev;
reg  v_inst_prev;
reg  z_inst_prev;

reg [7:0] C_Bus_expected_prev;
reg  c_inst_expected_prev;
reg  n_inst_expected_prev;
reg  v_inst_expected_prev;
reg  z_inst_expected_prev;

reg [7:0] last_C_Bus_exp;
reg  last_c_inst_exp;
reg  last_n_inst_exp;
reg  last_v_inst_exp;
reg  last_z_inst_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	C_Bus_prev = C_Bus;
	c_inst_prev = c_inst;
	n_inst_prev = n_inst;
	v_inst_prev = v_inst;
	z_inst_prev = z_inst;
end

// update expected /o prevs

always @(trigger)
begin
	C_Bus_expected_prev = C_Bus_expected;
	c_inst_expected_prev = c_inst_expected;
	n_inst_expected_prev = n_inst_expected;
	v_inst_expected_prev = v_inst_expected;
	z_inst_expected_prev = z_inst_expected;
end


// expected C_Bus[ 7 ]
initial
begin
	C_Bus_expected[7] = 1'bX;
end 
// expected C_Bus[ 6 ]
initial
begin
	C_Bus_expected[6] = 1'bX;
end 
// expected C_Bus[ 5 ]
initial
begin
	C_Bus_expected[5] = 1'bX;
end 
// expected C_Bus[ 4 ]
initial
begin
	C_Bus_expected[4] = 1'bX;
end 
// expected C_Bus[ 3 ]
initial
begin
	C_Bus_expected[3] = 1'bX;
end 
// expected C_Bus[ 2 ]
initial
begin
	C_Bus_expected[2] = 1'bX;
end 
// expected C_Bus[ 1 ]
initial
begin
	C_Bus_expected[1] = 1'bX;
end 
// expected C_Bus[ 0 ]
initial
begin
	C_Bus_expected[0] = 1'bX;
end 

// expected c_inst
initial
begin
	c_inst_expected = 1'bX;
end 

// expected n_inst
initial
begin
	n_inst_expected = 1'bX;
end 

// expected v_inst
initial
begin
	v_inst_expected = 1'bX;
end 

// expected z_inst
initial
begin
	z_inst_expected = 1'bX;
end 
// generate trigger
always @(C_Bus_expected or C_Bus or c_inst_expected or c_inst or n_inst_expected or n_inst or v_inst_expected or v_inst or z_inst_expected or z_inst)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected C_Bus = %b | expected c_inst = %b | expected n_inst = %b | expected v_inst = %b | expected z_inst = %b | ",C_Bus_expected_prev,c_inst_expected_prev,n_inst_expected_prev,v_inst_expected_prev,z_inst_expected_prev);
	$display("| real C_Bus = %b | real c_inst = %b | real n_inst = %b | real v_inst = %b | real z_inst = %b | ",C_Bus_prev,c_inst_prev,n_inst_prev,v_inst_prev,z_inst_prev);
`endif
	if (
		( C_Bus_expected_prev[0] !== 1'bx ) && ( C_Bus_prev[0] !== C_Bus_expected_prev[0] )
		&& ((C_Bus_expected_prev[0] !== last_C_Bus_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_Bus[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_Bus_expected_prev);
		$display ("     Real value = %b", C_Bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_Bus_exp[0] = C_Bus_expected_prev[0];
	end
	if (
		( C_Bus_expected_prev[1] !== 1'bx ) && ( C_Bus_prev[1] !== C_Bus_expected_prev[1] )
		&& ((C_Bus_expected_prev[1] !== last_C_Bus_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_Bus[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_Bus_expected_prev);
		$display ("     Real value = %b", C_Bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_Bus_exp[1] = C_Bus_expected_prev[1];
	end
	if (
		( C_Bus_expected_prev[2] !== 1'bx ) && ( C_Bus_prev[2] !== C_Bus_expected_prev[2] )
		&& ((C_Bus_expected_prev[2] !== last_C_Bus_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_Bus[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_Bus_expected_prev);
		$display ("     Real value = %b", C_Bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_Bus_exp[2] = C_Bus_expected_prev[2];
	end
	if (
		( C_Bus_expected_prev[3] !== 1'bx ) && ( C_Bus_prev[3] !== C_Bus_expected_prev[3] )
		&& ((C_Bus_expected_prev[3] !== last_C_Bus_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_Bus[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_Bus_expected_prev);
		$display ("     Real value = %b", C_Bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_Bus_exp[3] = C_Bus_expected_prev[3];
	end
	if (
		( C_Bus_expected_prev[4] !== 1'bx ) && ( C_Bus_prev[4] !== C_Bus_expected_prev[4] )
		&& ((C_Bus_expected_prev[4] !== last_C_Bus_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_Bus[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_Bus_expected_prev);
		$display ("     Real value = %b", C_Bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_Bus_exp[4] = C_Bus_expected_prev[4];
	end
	if (
		( C_Bus_expected_prev[5] !== 1'bx ) && ( C_Bus_prev[5] !== C_Bus_expected_prev[5] )
		&& ((C_Bus_expected_prev[5] !== last_C_Bus_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_Bus[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_Bus_expected_prev);
		$display ("     Real value = %b", C_Bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_Bus_exp[5] = C_Bus_expected_prev[5];
	end
	if (
		( C_Bus_expected_prev[6] !== 1'bx ) && ( C_Bus_prev[6] !== C_Bus_expected_prev[6] )
		&& ((C_Bus_expected_prev[6] !== last_C_Bus_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_Bus[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_Bus_expected_prev);
		$display ("     Real value = %b", C_Bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_Bus_exp[6] = C_Bus_expected_prev[6];
	end
	if (
		( C_Bus_expected_prev[7] !== 1'bx ) && ( C_Bus_prev[7] !== C_Bus_expected_prev[7] )
		&& ((C_Bus_expected_prev[7] !== last_C_Bus_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_Bus[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_Bus_expected_prev);
		$display ("     Real value = %b", C_Bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_Bus_exp[7] = C_Bus_expected_prev[7];
	end
	if (
		( c_inst_expected_prev !== 1'bx ) && ( c_inst_prev !== c_inst_expected_prev )
		&& ((c_inst_expected_prev !== last_c_inst_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_inst :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_inst_expected_prev);
		$display ("     Real value = %b", c_inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_c_inst_exp = c_inst_expected_prev;
	end
	if (
		( n_inst_expected_prev !== 1'bx ) && ( n_inst_prev !== n_inst_expected_prev )
		&& ((n_inst_expected_prev !== last_n_inst_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n_inst :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n_inst_expected_prev);
		$display ("     Real value = %b", n_inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n_inst_exp = n_inst_expected_prev;
	end
	if (
		( v_inst_expected_prev !== 1'bx ) && ( v_inst_prev !== v_inst_expected_prev )
		&& ((v_inst_expected_prev !== last_v_inst_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port v_inst :: @time = %t",  $realtime);
		$display ("     Expected value = %b", v_inst_expected_prev);
		$display ("     Real value = %b", v_inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_v_inst_exp = v_inst_expected_prev;
	end
	if (
		( z_inst_expected_prev !== 1'bx ) && ( z_inst_prev !== z_inst_expected_prev )
		&& ((z_inst_expected_prev !== last_z_inst_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port z_inst :: @time = %t",  $realtime);
		$display ("     Expected value = %b", z_inst_expected_prev);
		$display ("     Real value = %b", z_inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_z_inst_exp = z_inst_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module NanoControlador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A_bus;
reg [7:0] B_bus;
reg [2:0] ula_op;
// wires                                               
wire [7:0] C_Bus;
wire c_inst;
wire n_inst;
wire v_inst;
wire z_inst;

wire sampler;                             

// assign statements (if any)                          
NanoControlador i1 (
// port map - connection between master ports and signals/registers   
	.A_bus(A_bus),
	.B_bus(B_bus),
	.C_Bus(C_Bus),
	.c_inst(c_inst),
	.n_inst(n_inst),
	.ula_op(ula_op),
	.v_inst(v_inst),
	.z_inst(z_inst)
);
// A_bus[ 7 ]
initial
begin
	A_bus[7] = 1'b0;
end 
// A_bus[ 6 ]
initial
begin
	A_bus[6] = 1'b0;
end 
// A_bus[ 5 ]
initial
begin
	A_bus[5] = 1'b0;
end 
// A_bus[ 4 ]
initial
begin
	A_bus[4] = 1'b0;
end 
// A_bus[ 3 ]
initial
begin
	A_bus[3] = 1'b0;
end 
// A_bus[ 2 ]
initial
begin
	A_bus[2] = 1'b0;
end 
// A_bus[ 1 ]
initial
begin
	A_bus[1] = 1'b0;
end 
// A_bus[ 0 ]
initial
begin
	A_bus[0] = 1'b1;
end 
// B_bus[ 7 ]
initial
begin
	B_bus[7] = 1'b0;
end 
// B_bus[ 6 ]
initial
begin
	B_bus[6] = 1'b0;
end 
// B_bus[ 5 ]
initial
begin
	B_bus[5] = 1'b0;
end 
// B_bus[ 4 ]
initial
begin
	B_bus[4] = 1'b0;
end 
// B_bus[ 3 ]
initial
begin
	B_bus[3] = 1'b0;
end 
// B_bus[ 2 ]
initial
begin
	B_bus[2] = 1'b0;
end 
// B_bus[ 1 ]
initial
begin
	B_bus[1] = 1'b1;
end 
// B_bus[ 0 ]
initial
begin
	B_bus[0] = 1'b0;
end 
// ula_op[ 2 ]
initial
begin
	ula_op[2] = 1'b0;
end 
// ula_op[ 1 ]
initial
begin
	ula_op[1] = 1'b0;
end 
// ula_op[ 0 ]
initial
begin
	ula_op[0] = 1'b0;
end 

NanoControlador_vlg_sample_tst tb_sample (
	.A_bus(A_bus),
	.B_bus(B_bus),
	.ula_op(ula_op),
	.sampler_tx(sampler)
);

NanoControlador_vlg_check_tst tb_out(
	.C_Bus(C_Bus),
	.c_inst(c_inst),
	.n_inst(n_inst),
	.v_inst(v_inst),
	.z_inst(z_inst),
	.sampler_rx(sampler)
);
endmodule

